package org.sasanlabs.service.vulnerability.lfi;

import static org.sasanlabs.vulnerability.utils.Constants.NULL_BYTE_CHARACTER;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Scanner;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.GenericUtils;
import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.service.vulnerability.pathTraversal.PathTraversalVulnerability;
import org.sasanlabs.vulnerability.types.VulnerabilitySubType;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;

@VulnerableAppRestController(
        descriptionLabel = "URL_BASED_LFI_INJECTION",
        value = "LocalFileInclusion",
        type = {VulnerabilityType.LFI})
public class LFIVulnerability {

    private static final transient Logger LOGGER =
            LogManager.getLogger(PathTraversalVulnerability.class);

    private static final String URL_PARAM_KEY = "file";

    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.LFI,
            description = "LFI_URL_DIRECT_INJECTION")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_1,
            descriptionLabel = "LFI_URL_PARAM_BASED_DIRECT_INJECTION",
            htmlTemplate = "LEVEL_1/LFI")
    public ResponseEntity<String> getVulnerablePayloadLevelUnsecure(
            @RequestParam Map<String, String> queryParams) {
        StringBuilder payload = new StringBuilder();
        String queryParameterURL = queryParams.get(URL_PARAM_KEY);
        if (queryParameterURL != null) {
            try {
                File file =
                        new File(
                                "src/main/java/org/sasanlabs/service/vulnerability/lfi/"
                                        + queryParameterURL);
                Scanner reader = new Scanner(file);
                String data = "";
                while (reader.hasNextLine()) {
                    data = data + reader.nextLine();
                }
                data =
                        data
                                + "<a href='/VulnerableApp/LocalFileInclusion/LEVEL_2'>go to LEVEL_2</a>";
                payload.append(data);
                reader.close();
            } catch (IOException e) {
                LOGGER.error("Following error occurred:", e);
            }
        }

        return new ResponseEntity<>(
                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()),
                HttpStatus.OK);
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilitySubType.LFI,
            description = "LFI_URL_DIRECT_INJECTION_WITH_VALIDATION_ON_FILE")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_2,
            descriptionLabel = "LFI_URL_PARAM_BASED_INJECTION_WITH_VALIDATION_ON_FILE",
            htmlTemplate = "LEVEL_1/LFI")
    public ResponseEntity<String> getVulnerablePayloadLevelUnsecureLevel2(
            @RequestParam Map<String, String> queryParams) {
        StringBuilder payload = new StringBuilder();
        String queryParameterURL = queryParams.get(URL_PARAM_KEY);
        if (queryParameterURL != null && queryParameterURL.contains(NULL_BYTE_CHARACTER)) {
            try {
                queryParameterURL = queryParameterURL.replace(NULL_BYTE_CHARACTER, "");
                File file =
                        new File(
                                "src/main/java/org/"
                                        + "sasanlabs/service/vulnerability/lfi/"
                                        + queryParameterURL);
                Scanner reader = new Scanner(file);
                String data = "";
                while (reader.hasNextLine()) {
                    data = data + reader.nextLine();
                }
                payload.append(data);
                reader.close();
            } catch (IOException e) {
                LOGGER.error("Following error occurred:", e);
            }
        }

        return new ResponseEntity<>(
                GenericUtils.wrapPayloadInGenericVulnerableAppTemplate(payload.toString()),
                HttpStatus.OK);
    }
}
